import json
import re

import requests

host = 'https://httpbin.org'
get = '/get'
strings = '/stream/'
post = '/post'
data_to_out = 'headers'
auth = '/basic-auth/user/passwd'
test_header = {'Host-Test': 'value1', 'Host-Test123': 'Value1'}
test_header1 = {'Host-Test': 'value1', 'Host-Test123': 'Value1'}


class HttpBin(object):
    @staticmethod
    def http_get_header_method(header_to_send):
        """
        Sends specified header in request to host and receives response with header list.
        Args:
            header_to_send: dict with specified header, that should be send

        Returns: a tuple of two values. The first is response status. The second is dict with received header.
        If in received list absent header, that was sent to host method returns a tuple with response status and
        an empty dict.
        """
        response = requests.get(url=host + get, headers=header_to_send)
        dict_to_transfer = {}
        headers = response.json()[data_to_out]
        mismatch_flag = 0
        for item in header_to_send:
            if item not in headers:
                mismatch_flag += 1
        if mismatch_flag == 0:
            dict_to_transfer.update(header_to_send)
        else:
            dict_to_transfer = {}
        return response.status_code, dict_to_transfer

    @staticmethod
    def http_strings_return_method(data):
        """
        Counts the specified number of rows in the response
        from host, where n - the number of output strings.
        Args:
            data: a string with the number of lines to output

        Returns: a tuple of two values. The first is response status.
         The second is number of output strings.

        """
        response = requests.get(host + strings + str(data))
        return response.status_code, str(len(re.findall(r"[\n']+?", data.text)))

    @staticmethod
    def http_auth_providing_method(user_data):
        """
        Performs authentication based on specified user account data in the request.
        Args:
            user_data: a tuple of two values: user name and user password.

        Returns:
        Returns status of authentication response.
        """
        response = requests.get(host + auth, auth=user_data)
        return response.status_code

    @staticmethod
    def http_send_parameters(query_string):
        """
        Sends the specified number and values query string parameters in request.
        Args:
            query_string: a dict with specified number and values query string parameters

        Returns: a  tuple of two values. The first is response status.
         The second is query parameters of response.

        """
        response = requests.post(host + post, params=query_string)
        try:
            result = (response.status_code, response.json()['args'])
            return result
        except ValueError:
            return response.status_code, None

    @staticmethod
    def http_send_parameters_in_body(parameters):
        """
        Sends the specified number and values string parameters
        that transfers in body of  request.
        Args:
            parameters: a dict with specified number and values query string parameters

        Returns: a tuple of two values. The first is response status.
         The second is query parameters of response.

        """
        response = requests.post(host + post, data=parameters)
        try:
            result = (response.status_code, response.json()['form'])
            return result
        except ValueError:
            return response.status_code, None
